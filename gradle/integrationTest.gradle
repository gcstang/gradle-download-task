buildscript {
    dependencies {
        classpath 'org.mortbay.jetty:jetty-embedded:6.1.25'
    }
    
    repositories {
        mavenCentral()
    }
}

import org.apache.tools.ant.taskdefs.condition.Os
import org.mortbay.jetty.Handler
import org.mortbay.jetty.Server
import org.mortbay.jetty.handler.DefaultHandler
import org.mortbay.jetty.handler.HandlerList
import org.mortbay.jetty.handler.ResourceHandler
import org.mortbay.resource.Resource

task integrationTest << {
    def testStr = "This is a test"
    def testStr2 = "This is another test"
    
    def versionsToTest = [
        '1.0', '1.1', '1.2', '1.3', '1.4', '1.5',
        '1.6', '1.7', '1.8', '1.9', '1.10', '1.11', '1.12',
        '2.0', '2.1', '2.2', '2.3', '2.4', '2.5', '2.6', '2.7', '2.8', '2.9',
        '2.10', '2.11', '2.12', '2.13', '2.14', '2.14.1',
        '3.0'
    ]
    
    //run server on any free port
    def server = new Server(0)
    
    //serve resources from temporary folder
    def resourceHandler = new ResourceHandler()
    resourceHandler.setBaseResource(Resource.newResource(
            temporaryDir.getAbsolutePath()))
    
    def handlers = new HandlerList()
    handlers.setHandlers([ resourceHandler, new DefaultHandler() ] as Handler[])
    server.setHandler(handlers)
    
    server.start()
    def serverPort = server.getConnectors()[0].getLocalPort()
    
    def testFile = null
    def testFile2 = null
    try {
        //write simple test files to temporary directory
        testFile = new File(temporaryDir, "test.txt")
        testFile2 = new File(temporaryDir, "test2.txt")
        testFile.write(testStr)
        //write testStr into testFile2 but later check that it hasn't been overwritten
        testFile2.write(testStr)
        
        def testFileSrc = "http://localhost:" + serverPort + "/test.txt"
        def testFile2Src = "http://localhost:" + serverPort + "/test2.txt"
        
        //create Gradle test project
        def testGradle = { version ->
            println("Testing Gradle version ${version} ...")
            
            def testProjectDir = new File(temporaryDir, version)
            
            if (testProjectDir.exists()) {
                project.delete(testProjectDir)
            }
            
            testProjectDir.mkdirs()
            def testProjectBuildScript = new File(testProjectDir, "build.gradle")
            testProjectBuildScript.write("""
                buildscript {
                    dependencies {
                        classpath '${project.group}:${project.name}:${project.version}'
                    }
                    
                    repositories {
                        mavenLocal()
                        mavenCentral()
                    }
                }
                
                apply plugin: 'de.undercouch.download'
                
                task wrapper(type: Wrapper) {
                    gradleVersion = '${version}'
                }
                
                import de.undercouch.gradle.tasks.download.Download
                import de.undercouch.gradle.tasks.download.Verify
                
                task downloadFile(type: Download) {
                    src '${testFileSrc}'
                    dest buildDir
                }
                
                task downloadFile2(type: Download) {
                    src '${testFile2Src}'
                    dest buildDir
                    overwrite false
                    onlyIfNewer true
                }
                
                task verifyFile(type: Verify, dependsOn: downloadFile) {
                    src new File(buildDir, '${testFile.name}')
                    algorithm 'MD5'
                    checksum 'ce114e4501d2f4e2dcea3e17b546f339'
                }
            """)
            
            //define destination test files
            def downloadedTestFile = new File(testProjectDir, 'build/test.txt')
            def downloadedTestFile2 = new File(testProjectDir, 'build/test2.txt')
            
            //create second destination test file to simulate onlyIfNewer = true and overwrite = false
            downloadedTestFile2.getParentFile().mkdirs()
            downloadedTestFile2.write(testStr2)
            
            //execute Gradle to create a Gradle wrapper for the test project
            def gradlew = [ new File(rootDir, 'gradlew').getAbsolutePath() ]
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                gradlew = [ 'cmd', '/c', new File(rootDir, 'gradlew.bat').getAbsolutePath() ]
            }
            exec {
                workingDir testProjectDir
                commandLine gradlew + ['--no-daemon', 'wrapper']
            }
            
            //execute test project
            gradlew = [ new File(testProjectDir, 'gradlew').getAbsolutePath() ]
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                gradlew = [ 'cmd', '/c', new File(testProjectDir, 'gradlew.bat').getAbsolutePath() ]
            }
            exec {
                workingDir testProjectDir
                commandLine gradlew + ['--version']
            }
            exec {
                workingDir testProjectDir
                commandLine gradlew + ['--no-daemon', 'downloadFile', 'downloadFile2', 'verifyFile']
            }
            
            //check test files
            if (!downloadedTestFile.getText().equals(testStr)) {
                throw new IllegalStateException("Downloaded file does not match test file contents (test.txt)")
            }
            if (!downloadedTestFile2.getText().equals(testStr2)) {
                throw new IllegalStateException("test file has been overwritten (test2.txt)")
            }
            
            project.delete(testProjectDir)
        }
        
        for (vtt in versionsToTest) {
            testGradle(vtt)
        }
    } finally {
        if (testFile != null) {
            testFile.delete()
        }
        if (testFile2 != null) {
            testFile2.delete()
        }
        server.stop()
    }
}

check.dependsOn integrationTest
